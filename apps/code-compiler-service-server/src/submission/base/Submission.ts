/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsDate,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { Language } from "../../language/base/Language";
import { Result } from "../../result/base/Result";
import { EnumSubmissionStatus } from "./EnumSubmissionStatus";
import { User } from "../../user/base/User";

@ObjectType()
class Submission {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  input!: string | null;

  @ApiProperty({
    required: false,
    type: () => Language,
  })
  @ValidateNested()
  @Type(() => Language)
  @IsOptional()
  language?: Language | null;

  @ApiProperty({
    required: false,
    type: () => [Result],
  })
  @ValidateNested()
  @Type(() => Result)
  @IsOptional()
  results?: Array<Result>;

  @ApiProperty({
    required: false,
    enum: EnumSubmissionStatus,
  })
  @IsEnum(EnumSubmissionStatus)
  @IsOptional()
  @Field(() => EnumSubmissionStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;
}

export { Submission as Submission };
